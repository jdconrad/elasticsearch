[[painless-operators-array]]
=== Operators: Array

[[array-initialization-operator]]
==== Array Initialization

You create and initialize arrays using the brackets `[]` and braces `{}`
operators. Each set of brackets represents a dimension. The values you want to
initialize each dimension with are specified as a comma-separated list enclosed
in braces. For example, `new int[] {1, 2, 3}` creates a one dimensional `int`
array with a size of 3 and the values 1, 2, and 3.

To allocate an array, you use the `new` keyword followed by the type and a
set of brackets for each dimension. You can explicitly define the size of each dimension by specifying an expression within the brackets, or initialize each
dimension with the desired number of values. The allocated size of each
dimension is its permanent size.

To initialize an array, specify the values you want to initialize
each dimension with as a comma-separated list of expressions enclosed in braces.
For example, `new int[] {1, 2, 3}` creates a one-dimensional `int` array with a
size of 3 and the values 1, 2, and 3.

When you initialize an array, the order of the expressions is maintained. Each expression used as part of the initialization is converted to the
array's type. An error occurs if the types do not match.

*Grammar:*
[source,ANTLR4]
----
declare_array: TYPE ('[' ']')+;

array_initialization: 'new' TYPE '[' ']' '{' expression (',' expression) '}'
                    | 'new' TYPE '[' ']' '{' '}';
----

*Examples:*
[source,Java]
----
int[] x = new int[5];          // Declare int array x and assign it a newly
                               //   allocated int array with a size of 5
def[][] y = new def[5][5];     // Declare the 2-dimensional def array y and
                               //   assign it a newly allocated 2-dimensional
                               //   array where both dimensions have a size of 5
int[] x = new int[] {1, 2, 3}; // Declare int array x and set it to an int
                               //   array with values 1, 2, 3 and a size of 3
int i = 1;
long l = 2L;
float f = 3.0F;
double d = 4.0;
String s = "5";
def[] da = new def[] {i, l, f*d, s}; // Declare def array da and set it to
                                     // a def array with a size of 4 and the
                                     // values i, l, f*d, and s
----

[[array-access-operator]]
==== Array Access

Elements in an array are stored and accessed using the brackets `[]` operator.
Elements are referenced by an expression enclosed in brackets. An error
occurs if the expression used to reference an element cannot be implicitly
cast to an `int`.

The range of elements within an array that can be accessed is `[0, size)` where
size is the originally allocated size of the array. To access elements relative
to the last element in an array, you can use a negative numeric value from
`[-size, -1]`. An error occurs if you attempt to reference an element outside
of the array's range.

*Grammar:*
[source,ANTLR4]
----
brace_access: '[' expression ']'
----

*Examples:*
[source,Java]
----

int[] x = new int[2];     // Declare int array x and set it to a newly allocated
                          //   array with a size of 2
x[0] = 2;                 // Set the 0th element of array x to 2
x[1] = 5;                 // Set the 1st element of array x to 5
int y = x[0] + x[1];      // Declare the int variable y and set it to the sum
                          //   of the first two elements of array x
int z = 1;                // Declare the int variable z and set it to 1
return x[z];              // Access the 1st element of array x using the
                          //   variable z as an expression and return the value

def d = new int[2];       // Declare def variable d and set it to a newly
                          //   allocated array with a size of 2
d[0] = 2;                 // Set the 0th element of array d to 2
d[1] = 5;                 // Set the 1st element of array d to 2
def y = d[0] + d[1];      // Declare def variable y and set it to the sum
                          //   of the first two elements of array d
def z = 1;                // Declare def variable z and set it to 1
return d[z];              // Access the 1st element of array d using the
                          //   variable z as an expression and return the value
----

NOTE: The use of the `def` type in the second example means that the types
cannot be resolved until runtime.

[[array-length-operator]]
==== Array Length

Arrays contain a special member known as 'length' that is a read-only value that contains the size of the array.  This member can be accessed from an array using the dot operator.

*Examples:*
[source,Java]
----
int[] x = new int[10]; // declares an int array variable x and sets it to a newly allocated array with a size of 10
int l = x.length;      // declares and int variable l and sets it to the field length of variable x
----

[[new-array-operator]]
==== New Array

An array type instance can be allocated using the new operator. The format starts with the new operator followed by the type followed by a series of opening and closing braces each containing an expression for the size of the dimension.

*Grammar:*
[source,ANTLR4]
----
new_array: 'new' TYPE ('[' expression ']')+;
----

*Examples:*
[source,Java]
----
int[] x = new int[5];      // declares an int array variable x and sets it to a newly allocated array with a size of 5
x = new int[10];           // sets the int array variable x to a newly allocated array with a size of 10
def[][] y = new def[5][5]; // declares a 2-dimensional def array variable y and set it to a newly
                           // allocated 2-dimensional array where both dimensions have a size of 5
----